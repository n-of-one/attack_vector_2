import React, {useEffect, useState} from 'react'
import {TangleRoot} from "./tangle/TangleRoot";
import {PasswordRoot} from "./password/PasswordRoot";
import {WordSearchRoot} from "./wordsearch/WordSearchRoot";
import {NetwalkRoot} from "./netwalk/NetwalkRoot";
import {NETWALK_ICE, PASSWORD_ICE, TAR_ICE, TANGLE_ICE, WORD_SEARCH_ICE} from "../common/enums/LayerTypes";
import {TarRoot} from "./tar/TarRoot";
import {TopLevelError} from "../common/component/TopLevelError";

interface Props {
    layerId: string,
}

export const IceSelector = (props: Props) => {

    const [iceType, setIceType] = useState("")
    const [iceId, setIceId] = useState("")


    useEffect(() => {
        const fetchData = async () => {
            const response: Response = await fetch(`/api/ice/${props.layerId}`)
            const text: string = await response.text()
            const responseObject = JSON.parse(text)
            setIceType(responseObject.type)
            setIceId(responseObject.iceId)
        }

        fetchData().catch(() => {
            setIceType("CONNECT_ERROR")
        });
    }, [props.layerId])



    if (iceType === "") {
        return <div style={{color: "cornsilk"}}>Loading</div>
    }
        // return <TopLevelError error="Please don't share URLs between players" description="This is circumventing the limitations of the game.
        //         Off-game hacking is against the spirit of the game."/>

    if (!iceId) {
        return <TopLevelError error="Ice not found"
                              description={`(AV server failed to find the ice you want to hack)`}/>
    }

    if (iceType === TANGLE_ICE) return <TangleRoot iceId={iceId} nextUrl={null}/>
    if (iceType === PASSWORD_ICE) return <PasswordRoot iceId={iceId} nextUrl={null}/>
    if (iceType === WORD_SEARCH_ICE) return <WordSearchRoot iceId={iceId} nextUrl={null}/>
    if (iceType === NETWALK_ICE) return <NetwalkRoot iceId={iceId} nextUrl={null}/>
    if (iceType === TAR_ICE) return <TarRoot iceId={iceId} nextUrl={null}/>

    if (iceType === "CONNECT_ERROR") return <TopLevelError error="Connection error"
                                                           description={`(Failed to connect to AV server, try again)`}/>

    return <TopLevelError error="Invalid connection"
                          description={`(Uknown ice type: ${iceType} , maybe this QR/URL was generated by an different version of AV?)`}/>

}
