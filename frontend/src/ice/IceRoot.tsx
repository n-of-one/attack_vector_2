import React from 'react'
import {TangleRoot} from "./tangle/TangleRoot";
import {PasswordRoot} from "./password/PasswordRoot";
import {WordSearchRoot} from "./wordsearch/WordSearchRoot";
import {NetwalkRoot} from "./netwalk/NetwalkRoot";
import {NETWALK_ICE, PASSWORD_ICE, TAR_ICE, TANGLE_ICE, WORD_SEARCH_ICE, layerTypeFromIceId} from "../common/enums/LayerTypes";
import {TarRoot} from "./tar/TarRoot";
import {TopLevelError} from "../common/component/TopLevelError";

interface Props {
    iceId: string,
    nextUrl: string | null
}

export const IceRoot = (props: Props) => {

    const layerType = layerTypeFromIceId(props.iceId)

    switch (layerType) {
        case TANGLE_ICE: return <TangleRoot iceId={props.iceId} nextUrl={props.nextUrl}/>
        case PASSWORD_ICE: return <PasswordRoot iceId={props.iceId} nextUrl={props.nextUrl}/>
        case WORD_SEARCH_ICE: return <WordSearchRoot iceId={props.iceId} nextUrl={props.nextUrl}/>
        case NETWALK_ICE: return <NetwalkRoot iceId={props.iceId} nextUrl={props.nextUrl}/>
        case TAR_ICE: return <TarRoot iceId={props.iceId} nextUrl={props.nextUrl}/>
        default: return <TopLevelError error="Invalid connection"
                                       description={`(Unknown ice type: ${props.iceId} , maybe this QR/URL was generated by an different version of Attack Vector?)`}/>

    }
}
