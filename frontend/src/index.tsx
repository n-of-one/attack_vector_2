import React from 'react'
import {createRoot} from 'react-dom/client'
import {BrowserRouter, Routes, Route, useParams} from 'react-router-dom'
import {GmRoot} from "./gm/GmRoot"
import {EditorRoot} from "./editor/EditorRoot"
import {Login} from "./login/Login"
import {HackerRoot} from "./hacker/HackerRoot"
import Cookies from "js-cookie"
import {ToasterConfig} from "./common/util/Notification";
import {IceRoot} from "./ice/IceRoot";
import {BannerPage} from "./login/Sso";
import {RequiresRole} from "./common/user/RequiresRole";
import {larp} from "./common/Larp";
import {StatusLightRoot} from "./widget/status_light/StatusLightRoot";
import {TopLevelError} from "./common/component/TopLevelError";
import {decodeAppReference} from "./common/util/Util";
import {AppRoot} from "./app/AppRoot";
import {IceSelector} from "./ice/IceSelector";

console.log("\nWelcome to _Attack Vector_" +
    "\n" +
    "\nUsing the browser console / dev-tools is not part of this game." +
    "\nYou don't need to do any real-life hacking to play this game." +
    "\nReal-life hacking is against the spirit of this game." +
    "\n" +
    "\n_Attack Vector_ is open source: https://github.com/n-of-one/attack_vector_2" +
    "\n ")


const ReRoute = (): JSX.Element => {

    let type = Cookies.get("type")
    if (type === "ADMIN") {
        window.document.location.href = "/gm/"
        return (<></>)
    }
    if (type === "GM") {
        window.document.location.href = "/gm/"
        return (<></>)
    }
    if (type === "HACKER" || type === "HACKER_MANAGER") {
        window.document.location.href = "/hacker/"
        return (<></>)
    }
    console.log("Unknown user type: " + type)
    Cookies.remove("jwt")
    Cookies.remove("type")
    Cookies.remove("roles")
    window.document.location.href = larp.loginUrl
    return (<></>)
}

const container = document.getElementById('app') as HTMLDivElement
const root = createRoot(container)

const Editor = () => {
    const {siteId} = useParams()
    return (<EditorRoot siteId={siteId as string}/>)
}

const Standalone = () => {
    const {encodedParam} = useParams() // encodedParam example: 'aWJnLGpqYmIlOWg6biA6OnJwKH91bHNlNXoqfSQia2xFUx9WV0BUCkocExoBGUgXAQ=='

    try {
        const param = decodeAppReference(encodedParam as string) // param example: 'app/statusLight-0b1b-45ba?hacking=true&level=1'
        console.log(param)

        const [path, query] = param.split("?") // query example: 'hacking=true&level=1'

        const [type, id] = path.split("/") // type example: 'ice'. id example: 'node-0b1b-45ba:layer-c0f8'
        switch (type) {
            case "ice":
                return <RequiresRole requires="ROLE_HACKER"><IceRoot iceId={id} nextUrl={null}/></RequiresRole>
            case "iceLayer":
                return <RequiresRole requires="ROLE_HACKER"><IceSelector layerId={id}/></RequiresRole>
            case "app":
                return <AppRoot appId={id} query={query}/>
            case "widget":
                return <StatusLightRoot appId={id}/>
            default:
                return <TopLevelError error="Invalid connection"
                                      description={`(Unknown app type: ${type}, maybe the QR code/URL is from an older/different version of Attack Vector?)`}/>
        }
    } catch (e) {
        console.log(e)
        return <TopLevelError error="Invalid connection" description="(This does not seems to be a valid QR code / URL generated by Attack Vector)"/>
    }
}

root.render(
    <>
        <BrowserRouter>
            <Routes>
                <Route path="/login" element={<Login/>}/>
                <Route path="/loggedOut" element={<BannerPage/>}/>
                <Route path="/hacker" element={<HackerRoot/>}/>
                <Route path="/gm" element={<GmRoot/>}/>
                <Route path="/edit/:siteId" element={<Editor/>}/>
                <Route path="/!/:encodedParam" element={<Standalone/>}/>
                <Route path="/" element={<ReRoute/>}/>
                <Route path="*" element={<ReRoute/>}/>
            </Routes>
        </BrowserRouter>
        <ToasterConfig/>
    </>
)
