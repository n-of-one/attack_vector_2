name: Build and Deploy to ECS
run-name: ${{ github.actor }} Deploys
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: av2
  ECS_SERVICE: demo                                     # set this to your Amazon ECS service name
  ECS_CLUSTER: attack_vector_cluster                    # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./deploy/task_definition.json    # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: demo                                  # set this to the name of the container in the containerDefinitions section of your task definition

jobs:
  Build-backend-job:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        working-directory: ./backend
        run: mvn --batch-mode --update-snapshots package

      - name: View build results
        working-directory: ./backend
        run: ls -als target/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG: github-latest
        working-directory: ./backend
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: set the secrets  the ECS Task definition
        working-directory: ./deploy
        id: create-task-definition
        run: |
          sed -i 's/$MONGODB_URI/${{ secrets.MONGODB_URI }} /g' task_definition.json
          cat task_definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          #image: test

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
